// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AWS::ApiGateway::RestApi 1`] = `
"import * as cdk from "aws-cdk-lib";

export interface CfnRestApiProps {
  readonly apiKeySourceType: string;

  readonly binaryMediaTypes: Array<string>;

  readonly body: any;

  readonly bodyS3Location: S3Location;

  readonly cloneFrom: string;

  readonly endpointConfiguration: EndpointConfiguration;

  readonly description: string;

  readonly disableExecuteApiEndpoint: boolean;

  readonly failOnWarnings: boolean;

  readonly name: string;

  readonly minimumCompressionSize: number;

  readonly mode: string;

  readonly policy: any;

  readonly parameters: Map<string, string>;

  readonly tags: Array<Tag>;
}


// @ts-ignore TS6133
function cfnRestApiApiKeySourceTypePropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnRestApiBinaryMediaTypesPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnRestApiBodyPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface S3Location {
  readonly bucket: string;

  readonly eTag: string;

  readonly version: string;

  readonly key: string;
}


// @ts-ignore TS6133
function cfnRestApiBodyS3LocationPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnRestApiCloneFromPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface EndpointConfiguration {
  readonly types: Array<string>;

  readonly vpcEndpointIds: Array<string>;
}


// @ts-ignore TS6133
function cfnRestApiEndpointConfigurationPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnRestApiDescriptionPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnRestApiDisableExecuteApiEndpointPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnRestApiFailOnWarningsPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnRestApiNamePropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnRestApiMinimumCompressionSizePropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnRestApiModePropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnRestApiPolicyPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnRestApiParametersPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface Tag {
  readonly key: string;

  readonly value: string;
}


// @ts-ignore TS6133
function cfnRestApiTagsPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}
"
`;

exports[`AWS::IAM::Role 1`] = `
"import * as cdk from "aws-cdk-lib";

export interface CfnRoleProps {
  readonly assumeRolePolicyDocument: any;

  readonly description: string;

  readonly managedPolicyArns: Array<string>;

  readonly maxSessionDuration: number;

  readonly path: string;

  readonly permissionsBoundary: string;

  readonly policies: Array<Policy>;

  readonly roleName: string;

  readonly tags: Array<Tag>;
}


// @ts-ignore TS6133
function cfnRoleAssumeRolePolicyDocumentPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnRoleDescriptionPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnRoleManagedPolicyArnsPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnRoleMaxSessionDurationPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnRolePathPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnRolePermissionsBoundaryPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface Policy {
  readonly policyDocument: string;

  readonly policyName: string;
}


// @ts-ignore TS6133
function cfnRolePoliciesPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnRoleRoleNamePropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface Tag {
  readonly key: string;

  readonly value: string;
}


// @ts-ignore TS6133
function cfnRoleTagsPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}
"
`;

exports[`AWS::Lambda::Function 1`] = `
"import * as cdk from "aws-cdk-lib";

export interface CfnFunctionProps {
  readonly description: string;

  readonly tracingConfig: TracingConfig;

  readonly vpcConfig: VpcConfig;

  readonly reservedConcurrentExecutions: number;

  readonly snapStart: SnapStart;

  readonly fileSystemConfigs: Array<FileSystemConfig>;

  readonly functionName: string;

  readonly runtime: string;

  readonly kmsKeyArn: string;

  readonly packageType: string;

  readonly codeSigningConfigArn: string;

  readonly layers: Array<string>;

  readonly tags: Array<Tag>;

  readonly imageConfig: ImageConfig;

  readonly memorySize: number;

  readonly deadLetterConfig: DeadLetterConfig;

  readonly timeout: number;

  readonly handler: string;

  readonly code: Code;

  readonly role: string;

  readonly environment: Environment;

  readonly ephemeralStorage: EphemeralStorage;

  readonly architectures: Array<string>;
}


// @ts-ignore TS6133
function cfnFunctionDescriptionPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface TracingConfig {
  readonly mode: string;
}


// @ts-ignore TS6133
function cfnFunctionTracingConfigPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface VpcConfig {
  readonly securityGroupIds: Array<string>;

  readonly subnetIds: Array<string>;
}


// @ts-ignore TS6133
function cfnFunctionVpcConfigPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnFunctionReservedConcurrentExecutionsPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface SnapStart {
  readonly applyOn: string;
}


// @ts-ignore TS6133
function cfnFunctionSnapStartPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface FileSystemConfig {
  readonly arn: string;

  readonly localMountPath: string;
}


// @ts-ignore TS6133
function cfnFunctionFileSystemConfigsPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnFunctionFunctionNamePropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnFunctionRuntimePropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnFunctionKmsKeyArnPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnFunctionPackageTypePropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnFunctionCodeSigningConfigArnPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnFunctionLayersPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface Tag {
  readonly value: string;

  readonly key: string;
}


// @ts-ignore TS6133
function cfnFunctionTagsPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface ImageConfig {
  readonly workingDirectory: string;

  readonly command: Array<string>;

  readonly entryPoint: Array<string>;
}


// @ts-ignore TS6133
function cfnFunctionImageConfigPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnFunctionMemorySizePropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface DeadLetterConfig {
  readonly targetArn: string;
}


// @ts-ignore TS6133
function cfnFunctionDeadLetterConfigPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnFunctionTimeoutPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnFunctionHandlerPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface Code {
  readonly s3ObjectVersion: string;

  readonly s3Bucket: string;

  readonly zipFile: string;

  readonly s3Key: string;

  readonly imageUri: string;
}


// @ts-ignore TS6133
function cfnFunctionCodePropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnFunctionRolePropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface Environment {
  readonly variables: Map<string, string>;
}


// @ts-ignore TS6133
function cfnFunctionEnvironmentPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface EphemeralStorage {
  readonly size: number;
}


// @ts-ignore TS6133
function cfnFunctionEphemeralStoragePropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnFunctionArchitecturesPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}
"
`;

exports[`AWS::S3::Bucket 1`] = `
"import * as cdk from "aws-cdk-lib";

export interface CfnBucketProps {
  readonly accelerateConfiguration: AccelerateConfiguration;

  readonly accessControl: string;

  readonly analyticsConfigurations: Array<AnalyticsConfiguration>;

  readonly bucketEncryption: BucketEncryption;

  readonly bucketName: string;

  readonly corsConfiguration: CorsConfiguration;

  readonly intelligentTieringConfigurations: Array<IntelligentTieringConfiguration>;

  readonly inventoryConfigurations: Array<InventoryConfiguration>;

  readonly lifecycleConfiguration: LifecycleConfiguration;

  readonly loggingConfiguration: LoggingConfiguration;

  readonly metricsConfigurations: Array<MetricsConfiguration>;

  readonly notificationConfiguration: NotificationConfiguration;

  readonly objectLockConfiguration: ObjectLockConfiguration;

  readonly objectLockEnabled: boolean;

  readonly ownershipControls: OwnershipControls;

  readonly publicAccessBlockConfiguration: PublicAccessBlockConfiguration;

  readonly replicationConfiguration: ReplicationConfiguration;

  readonly tags: Array<Tag>;

  readonly versioningConfiguration: VersioningConfiguration;

  readonly websiteConfiguration: WebsiteConfiguration;
}


export interface AccelerateConfiguration {
  readonly accelerationStatus: string;
}


// @ts-ignore TS6133
function cfnBucketAccelerateConfigurationPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnBucketAccessControlPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface AnalyticsConfiguration {
  readonly tagFilters: Array<TagFilter>;

  readonly storageClassAnalysis: StorageClassAnalysis;

  readonly id: string;

  readonly prefix: string;
}


export interface TagFilter {
  readonly value: string;

  readonly key: string;
}


export interface StorageClassAnalysis {
  readonly dataExport: DataExport;
}


export interface DataExport {
  readonly destination: Destination;

  readonly outputSchemaVersion: string;
}


export interface Destination {
  readonly bucketArn: string;

  readonly bucketAccountId: string;

  readonly format: string;

  readonly prefix: string;
}


// @ts-ignore TS6133
function cfnBucketAnalyticsConfigurationsPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface BucketEncryption {
  readonly serverSideEncryptionConfiguration: Array<ServerSideEncryptionRule>;
}


export interface ServerSideEncryptionRule {
  readonly bucketKeyEnabled: boolean;

  readonly serverSideEncryptionByDefault: ServerSideEncryptionByDefault;
}


export interface ServerSideEncryptionByDefault {
  readonly kMSMasterKeyID: string;

  readonly sSEAlgorithm: string;
}


// @ts-ignore TS6133
function cfnBucketBucketEncryptionPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnBucketBucketNamePropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface CorsConfiguration {
  readonly corsRules: Array<CorsRule>;
}


export interface CorsRule {
  readonly allowedHeaders: Array<string>;

  readonly allowedMethods: Array<string>;

  readonly allowedOrigins: Array<string>;

  readonly exposedHeaders: Array<string>;

  readonly id: string;

  readonly maxAge: number;
}


// @ts-ignore TS6133
function cfnBucketCorsConfigurationPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface IntelligentTieringConfiguration {
  readonly id: string;

  readonly prefix: string;

  readonly status: string;

  readonly tagFilters: Array<TagFilter>;

  readonly tierings: Array<Tiering>;
}


export interface Tiering {
  readonly accessTier: string;

  readonly days: number;
}


// @ts-ignore TS6133
function cfnBucketIntelligentTieringConfigurationsPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface InventoryConfiguration {
  readonly destination: Destination;

  readonly enabled: boolean;

  readonly id: string;

  readonly includedObjectVersions: string;

  readonly optionalFields: Array<string>;

  readonly prefix: string;

  readonly scheduleFrequency: string;
}


// @ts-ignore TS6133
function cfnBucketInventoryConfigurationsPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface LifecycleConfiguration {
  readonly rules: Array<Rule>;
}


export interface Rule {
  readonly abortIncompleteMultipartUpload: AbortIncompleteMultipartUpload;

  readonly expirationDate: string;

  readonly expirationInDays: number;

  readonly expiredObjectDeleteMarker: boolean;

  readonly id: string;

  readonly noncurrentVersionExpirationInDays: number;

  readonly noncurrentVersionExpiration: NoncurrentVersionExpiration;

  readonly noncurrentVersionTransition: NoncurrentVersionTransition;

  readonly noncurrentVersionTransitions: Array<NoncurrentVersionTransition>;

  readonly prefix: string;

  readonly status: string;

  readonly tagFilters: Array<TagFilter>;

  readonly objectSizeGreaterThan: string;

  readonly objectSizeLessThan: string;

  readonly transition: Transition;

  readonly transitions: Array<Transition>;
}


export interface AbortIncompleteMultipartUpload {
  readonly daysAfterInitiation: number;
}


export interface NoncurrentVersionExpiration {
  readonly noncurrentDays: number;

  readonly newerNoncurrentVersions: number;
}


export interface NoncurrentVersionTransition {
  readonly storageClass: string;

  readonly transitionInDays: number;

  readonly newerNoncurrentVersions: number;
}


export interface Transition {
  readonly storageClass: string;

  readonly transitionDate: string;

  readonly transitionInDays: number;
}


// @ts-ignore TS6133
function cfnBucketLifecycleConfigurationPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface LoggingConfiguration {
  readonly destinationBucketName: string;

  readonly logFilePrefix: string;
}


// @ts-ignore TS6133
function cfnBucketLoggingConfigurationPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface MetricsConfiguration {
  readonly accessPointArn: string;

  readonly id: string;

  readonly prefix: string;

  readonly tagFilters: Array<TagFilter>;
}


// @ts-ignore TS6133
function cfnBucketMetricsConfigurationsPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface NotificationConfiguration {
  readonly eventBridgeConfiguration: EventBridgeConfiguration;

  readonly lambdaConfigurations: Array<LambdaConfiguration>;

  readonly queueConfigurations: Array<QueueConfiguration>;

  readonly topicConfigurations: Array<TopicConfiguration>;
}


export interface EventBridgeConfiguration {
  readonly eventBridgeEnabled: boolean;
}


export interface LambdaConfiguration {
  readonly event: string;

  readonly filter: NotificationFilter;

  readonly function: string;
}


export interface NotificationFilter {
  readonly s3Key: S3KeyFilter;
}


export interface S3KeyFilter {
  readonly rules: Array<FilterRule>;
}


export interface FilterRule {
  readonly name: string;

  readonly value: string;
}


export interface QueueConfiguration {
  readonly event: string;

  readonly filter: NotificationFilter;

  readonly queue: string;
}


export interface TopicConfiguration {
  readonly event: string;

  readonly filter: NotificationFilter;

  readonly topic: string;
}


// @ts-ignore TS6133
function cfnBucketNotificationConfigurationPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface ObjectLockConfiguration {
  readonly objectLockEnabled: string;

  readonly rule: ObjectLockRule;
}


export interface ObjectLockRule {
  readonly defaultRetention: DefaultRetention;
}


export interface DefaultRetention {
  readonly years: number;

  readonly days: number;

  readonly mode: string;
}


// @ts-ignore TS6133
function cfnBucketObjectLockConfigurationPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnBucketObjectLockEnabledPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface OwnershipControls {
  readonly rules: Array<OwnershipControlsRule>;
}


export interface OwnershipControlsRule {
  readonly objectOwnership: string;
}


// @ts-ignore TS6133
function cfnBucketOwnershipControlsPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface PublicAccessBlockConfiguration {
  readonly blockPublicAcls: boolean;

  readonly blockPublicPolicy: boolean;

  readonly ignorePublicAcls: boolean;

  readonly restrictPublicBuckets: boolean;
}


// @ts-ignore TS6133
function cfnBucketPublicAccessBlockConfigurationPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface ReplicationConfiguration {
  readonly role: string;

  readonly rules: Array<ReplicationRule>;
}


export interface ReplicationRule {
  readonly deleteMarkerReplication: DeleteMarkerReplication;

  readonly destination: ReplicationDestination;

  readonly filter: ReplicationRuleFilter;

  readonly id: string;

  readonly prefix: string;

  readonly priority: number;

  readonly sourceSelectionCriteria: SourceSelectionCriteria;

  readonly status: string;
}


export interface DeleteMarkerReplication {
  readonly status: string;
}


export interface ReplicationDestination {
  readonly accessControlTranslation: AccessControlTranslation;

  readonly account: string;

  readonly bucket: string;

  readonly encryptionConfiguration: EncryptionConfiguration;

  readonly metrics: Metrics;

  readonly replicationTime: ReplicationTime;

  readonly storageClass: string;
}


export interface AccessControlTranslation {
  readonly owner: string;
}


export interface EncryptionConfiguration {
  readonly replicaKmsKeyID: string;
}


export interface Metrics {
  readonly eventThreshold: ReplicationTimeValue;

  readonly status: string;
}


export interface ReplicationTimeValue {
  readonly minutes: number;
}


export interface ReplicationTime {
  readonly status: string;

  readonly time: ReplicationTimeValue;
}


export interface ReplicationRuleFilter {
  readonly and: ReplicationRuleAndOperator;

  readonly prefix: string;

  readonly tagFilter: TagFilter;
}


export interface ReplicationRuleAndOperator {
  readonly prefix: string;

  readonly tagFilters: Array<TagFilter>;
}


export interface SourceSelectionCriteria {
  readonly replicaModifications: ReplicaModifications;

  readonly sseKmsEncryptedObjects: SseKmsEncryptedObjects;
}


export interface ReplicaModifications {
  readonly status: string;
}


export interface SseKmsEncryptedObjects {
  readonly status: string;
}


// @ts-ignore TS6133
function cfnBucketReplicationConfigurationPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface Tag {
  readonly key: string;

  readonly value: string;
}


// @ts-ignore TS6133
function cfnBucketTagsPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface VersioningConfiguration {
  readonly status: string;
}


// @ts-ignore TS6133
function cfnBucketVersioningConfigurationPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface WebsiteConfiguration {
  readonly errorDocument: string;

  readonly indexDocument: string;

  readonly routingRules: Array<RoutingRule>;

  readonly redirectAllRequestsTo: RedirectAllRequestsTo;
}


export interface RoutingRule {
  readonly redirectRule: RedirectRule;

  readonly routingRuleCondition: RoutingRuleCondition;
}


export interface RedirectRule {
  readonly hostName: string;

  readonly httpRedirectCode: string;

  readonly protocol: string;

  readonly replaceKeyPrefixWith: string;

  readonly replaceKeyWith: string;
}


export interface RoutingRuleCondition {
  readonly keyPrefixEquals: string;

  readonly httpErrorCodeReturnedEquals: string;
}


export interface RedirectAllRequestsTo {
  readonly hostName: string;

  readonly protocol: string;
}


// @ts-ignore TS6133
function cfnBucketWebsiteConfigurationPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}
"
`;

exports[`AWS::SQS::Queue 1`] = `
"import * as cdk from "aws-cdk-lib";

export interface CfnQueueProps {
  readonly contentBasedDeduplication: boolean;

  readonly deduplicationScope: string;

  readonly delaySeconds: number;

  readonly fifoQueue: boolean;

  readonly fifoThroughputLimit: string;

  readonly kmsDataKeyReusePeriodSeconds: number;

  readonly kmsMasterKeyId: string;

  readonly sqsManagedSseEnabled: boolean;

  readonly maximumMessageSize: number;

  readonly messageRetentionPeriod: number;

  readonly queueName: string;

  readonly receiveMessageWaitTimeSeconds: number;

  readonly redriveAllowPolicy: any;

  readonly redrivePolicy: any;

  readonly tags: Array<Tag>;

  readonly visibilityTimeout: number;
}


// @ts-ignore TS6133
function cfnQueueContentBasedDeduplicationPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnQueueDeduplicationScopePropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnQueueDelaySecondsPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnQueueFifoQueuePropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnQueueFifoThroughputLimitPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnQueueKmsDataKeyReusePeriodSecondsPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnQueueKmsMasterKeyIdPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnQueueSqsManagedSseEnabledPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnQueueMaximumMessageSizePropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnQueueMessageRetentionPeriodPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnQueueQueueNamePropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnQueueReceiveMessageWaitTimeSecondsPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnQueueRedriveAllowPolicyPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnQueueRedrivePolicyPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface Tag {
  readonly key: string;

  readonly value: string;
}


// @ts-ignore TS6133
function cfnQueueTagsPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnQueueVisibilityTimeoutPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}
"
`;

exports[`Alexa::ASK::Skill 1`] = `
"import * as cdk from "aws-cdk-lib";

export interface CfnSkillProps {
  readonly authenticationConfiguration: AuthenticationConfiguration;

  readonly vendorId: string;

  readonly skillPackage: SkillPackage;
}


export interface AuthenticationConfiguration {
  readonly clientId: string;

  readonly refreshToken: string;

  readonly clientSecret: string;
}


// @ts-ignore TS6133
function cfnSkillAuthenticationConfigurationPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


// @ts-ignore TS6133
function cfnSkillVendorIdPropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}


export interface SkillPackage {
  readonly s3BucketRole: string;

  readonly overrides: Overrides;

  readonly s3ObjectVersion: string;

  readonly s3Bucket: string;

  readonly s3Key: string;
}


export interface Overrides {
  readonly manifest: any;
}


// @ts-ignore TS6133
function cfnSkillSkillPackagePropertyToCloudFormation(properties: any): any {
  return {
    "Manifest": cdk.objectToCloudFormation(properties.manifest),
  };
}
"
`;

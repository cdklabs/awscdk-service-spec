CDK found the following issues while trying to read the CloudFormation resource definition for AWS_CloudFront:

    *** loading ***

us-east-2/aws-cloudfront-distribution.json: .definitions['DistributionConfig'].properties['Restrictions']
    {
      '$ref': '#/definitions/Restrictions',
      default: { GeoRestriction: { RestrictionType: 'none' } }
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'default' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-2/aws-cloudfront-distribution.json: .definitions['DistributionConfig']
    {
      additionalProperties: false,
      properties: {
        Aliases: { items: { type: 'string' }, type: 'array', uniqueItems: false },
        CNAMEs: { items: { type: 'string' }, type: 'array', uniqueItems: false },
        CacheBehaviors: {
          items: { '$ref': '#/definitions/CacheBehavior' },
          type: 'array',
          uniqueItems: false
        },
        Comment: { default: '', type: 'string' },
        ContinuousDeploymentPolicyId: { type: 'string' },
        CustomErrorResponses: {
          items: { '$ref': '#/definitions/CustomErrorResponse' },
          type: 'array',
          uniqueItems: false
        },
        CustomOrigin: { '$ref': '#/definitions/LegacyCustomOrigin' },
        DefaultCacheBehavior: { '$ref': '#/definitions/DefaultCacheBehavior' },
        DefaultRootObject: { default: '', type: 'string' },
        Enabled: { type: 'boolean' },
        HttpVersion: { default: 'http1.1', type: 'string' },
        IPV6Enabled: { type: 'boolean' },
        Logging: { '$ref': '#/definitions/Logging' },
        OriginGroups: { '$ref': '#/definitions/OriginGroups' },
        Origins: {
          items: { '$ref': '#/definitions/Origin' },
          type: 'array',
          uniqueItems: false
        },
        PriceClass: { default: 'PriceClass_All', type: 'string' },
        Restrictions: {
          '$ref': '#/definitions/Restrictions',
          default: { GeoRestriction: [Object] }
        },
        S3Origin: { '$ref': '#/definitions/LegacyS3Origin' },
        Staging: { type: 'boolean' },
        ViewerCertificate: {
          '$ref': '#/definitions/ViewerCertificate',
          default: { CloudFrontDefaultCertificate: true }
        },
        WebACLId: { default: '', type: 'string' }
      },
      required: [ 'Enabled', 'DefaultCacheBehavior' ],
      type: 'object'
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'properties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-west-2/aws-cloudfront-distribution.json: .definitions['DistributionConfig'].properties['Restrictions']
    {
      '$ref': '#/definitions/Restrictions',
      default: { GeoRestriction: { RestrictionType: 'none' } }
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'default' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-west-2/aws-cloudfront-distribution.json: .definitions['DistributionConfig']
    {
      additionalProperties: false,
      properties: {
        Aliases: { items: { type: 'string' }, type: 'array', uniqueItems: false },
        CNAMEs: { items: { type: 'string' }, type: 'array', uniqueItems: false },
        CacheBehaviors: {
          items: { '$ref': '#/definitions/CacheBehavior' },
          type: 'array',
          uniqueItems: false
        },
        Comment: { default: '', type: 'string' },
        ContinuousDeploymentPolicyId: { type: 'string' },
        CustomErrorResponses: {
          items: { '$ref': '#/definitions/CustomErrorResponse' },
          type: 'array',
          uniqueItems: false
        },
        CustomOrigin: { '$ref': '#/definitions/LegacyCustomOrigin' },
        DefaultCacheBehavior: { '$ref': '#/definitions/DefaultCacheBehavior' },
        DefaultRootObject: { default: '', type: 'string' },
        Enabled: { type: 'boolean' },
        HttpVersion: { default: 'http1.1', type: 'string' },
        IPV6Enabled: { type: 'boolean' },
        Logging: { '$ref': '#/definitions/Logging' },
        OriginGroups: { '$ref': '#/definitions/OriginGroups' },
        Origins: {
          items: { '$ref': '#/definitions/Origin' },
          type: 'array',
          uniqueItems: false
        },
        PriceClass: { default: 'PriceClass_All', type: 'string' },
        Restrictions: {
          '$ref': '#/definitions/Restrictions',
          default: { GeoRestriction: [Object] }
        },
        S3Origin: { '$ref': '#/definitions/LegacyS3Origin' },
        Staging: { type: 'boolean' },
        ViewerCertificate: {
          '$ref': '#/definitions/ViewerCertificate',
          default: { CloudFrontDefaultCertificate: true }
        },
        WebACLId: { default: '', type: 'string' }
      },
      required: [ 'Enabled', 'DefaultCacheBehavior' ],
      type: 'object'
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'properties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-1/aws-cloudfront-distribution.json: .definitions['DistributionConfig'].properties['Restrictions']
    {
      '$ref': '#/definitions/Restrictions',
      default: { GeoRestriction: { RestrictionType: 'none' } }
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'default' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-1/aws-cloudfront-distribution.json: .definitions['DistributionConfig']
    {
      additionalProperties: false,
      properties: {
        Aliases: { items: { type: 'string' }, type: 'array', uniqueItems: false },
        CNAMEs: { items: { type: 'string' }, type: 'array', uniqueItems: false },
        CacheBehaviors: {
          items: { '$ref': '#/definitions/CacheBehavior' },
          type: 'array',
          uniqueItems: false
        },
        Comment: { default: '', type: 'string' },
        ContinuousDeploymentPolicyId: { type: 'string' },
        CustomErrorResponses: {
          items: { '$ref': '#/definitions/CustomErrorResponse' },
          type: 'array',
          uniqueItems: false
        },
        CustomOrigin: { '$ref': '#/definitions/LegacyCustomOrigin' },
        DefaultCacheBehavior: { '$ref': '#/definitions/DefaultCacheBehavior' },
        DefaultRootObject: { default: '', type: 'string' },
        Enabled: { type: 'boolean' },
        HttpVersion: { default: 'http1.1', type: 'string' },
        IPV6Enabled: { type: 'boolean' },
        Logging: { '$ref': '#/definitions/Logging' },
        OriginGroups: { '$ref': '#/definitions/OriginGroups' },
        Origins: {
          items: { '$ref': '#/definitions/Origin' },
          type: 'array',
          uniqueItems: false
        },
        PriceClass: { default: 'PriceClass_All', type: 'string' },
        Restrictions: {
          '$ref': '#/definitions/Restrictions',
          default: { GeoRestriction: [Object] }
        },
        S3Origin: { '$ref': '#/definitions/LegacyS3Origin' },
        Staging: { type: 'boolean' },
        ViewerCertificate: {
          '$ref': '#/definitions/ViewerCertificate',
          default: { CloudFrontDefaultCertificate: true }
        },
        WebACLId: { default: '', type: 'string' }
      },
      required: [ 'Enabled', 'DefaultCacheBehavior' ],
      type: 'object'
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'properties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }

    *** patch ***

us-east-2/aws-cloudfront-cachepolicy.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::CachePolicy"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::CachePolicy"
[+]   "taggable": false
    }
us-east-2/aws-cloudfront-cloudfrontoriginaccessidentity.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::CloudFrontOriginAccessIdentity"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::CloudFrontOriginAccessIdentity"
[+]   "taggable": false
    }
us-east-2/aws-cloudfront-function.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::Function"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::Function"
      "writeOnlyProperties": [ ... ]
[+]   "taggable": false
    }
us-east-2/aws-cloudfront-keygroup.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::KeyGroup"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::KeyGroup"
[+]   "taggable": false
    }
us-east-2/aws-cloudfront-monitoringsubscription.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "createOnlyProperties": [ ... ]
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::MonitoringSubscription"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "required": [ ... ]
      "typeName": "AWS::CloudFront::MonitoringSubscription"
[+]   "taggable": false
    }
us-east-2/aws-cloudfront-originrequestpolicy.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::OriginRequestPolicy"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::OriginRequestPolicy"
[+]   "taggable": false
    }
us-east-2/aws-cloudfront-publickey.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::PublicKey"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::PublicKey"
[+]   "taggable": false
    }
us-east-2/aws-cloudfront-realtimelogconfig.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "createOnlyProperties": [ ... ]
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::RealtimeLogConfig"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::RealtimeLogConfig"
[+]   "taggable": false
    }
us-west-2/aws-cloudfront-cachepolicy.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::CachePolicy"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::CachePolicy"
[+]   "taggable": false
    }
us-west-2/aws-cloudfront-cloudfrontoriginaccessidentity.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::CloudFrontOriginAccessIdentity"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::CloudFrontOriginAccessIdentity"
[+]   "taggable": false
    }
us-west-2/aws-cloudfront-function.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::Function"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::Function"
      "writeOnlyProperties": [ ... ]
[+]   "taggable": false
    }
us-west-2/aws-cloudfront-keygroup.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::KeyGroup"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::KeyGroup"
[+]   "taggable": false
    }
us-west-2/aws-cloudfront-monitoringsubscription.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "createOnlyProperties": [ ... ]
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::MonitoringSubscription"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "required": [ ... ]
      "typeName": "AWS::CloudFront::MonitoringSubscription"
[+]   "taggable": false
    }
us-west-2/aws-cloudfront-originrequestpolicy.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::OriginRequestPolicy"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::OriginRequestPolicy"
[+]   "taggable": false
    }
us-west-2/aws-cloudfront-publickey.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::PublicKey"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::PublicKey"
[+]   "taggable": false
    }
us-west-2/aws-cloudfront-realtimelogconfig.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "createOnlyProperties": [ ... ]
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::RealtimeLogConfig"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::RealtimeLogConfig"
[+]   "taggable": false
    }
us-east-1/aws-cloudfront-cachepolicy.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::CachePolicy"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::CachePolicy"
[+]   "taggable": false
    }
us-east-1/aws-cloudfront-cloudfrontoriginaccessidentity.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::CloudFrontOriginAccessIdentity"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::CloudFrontOriginAccessIdentity"
[+]   "taggable": false
    }
us-east-1/aws-cloudfront-function.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::Function"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::Function"
      "writeOnlyProperties": [ ... ]
[+]   "taggable": false
    }
us-east-1/aws-cloudfront-keygroup.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::KeyGroup"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::KeyGroup"
[+]   "taggable": false
    }
us-east-1/aws-cloudfront-monitoringsubscription.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "createOnlyProperties": [ ... ]
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::MonitoringSubscription"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "required": [ ... ]
      "typeName": "AWS::CloudFront::MonitoringSubscription"
[+]   "taggable": false
    }
us-east-1/aws-cloudfront-originrequestpolicy.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::OriginRequestPolicy"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::OriginRequestPolicy"
[+]   "taggable": false
    }
us-east-1/aws-cloudfront-publickey.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::PublicKey"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::PublicKey"
[+]   "taggable": false
    }
us-east-1/aws-cloudfront-realtimelogconfig.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "additionalProperties": false
      "createOnlyProperties": [ ... ]
      "definitions": { ... }
      "description": "Resource Type definition for AWS::CloudFront::RealtimeLogConfig"
      "handlers": { ... }
      "primaryIdentifier": [ ... ]
      "properties": { ... }
      "readOnlyProperties": [ ... ]
      "required": [ ... ]
      "typeName": "AWS::CloudFront::RealtimeLogConfig"
[+]   "taggable": false
    }
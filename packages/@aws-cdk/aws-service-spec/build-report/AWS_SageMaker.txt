CDK found the following issues while trying to read the CloudFormation resource definition for AWS_SageMaker:

    *** interpreting ***

AWS::SageMaker::FeatureGroup: attributes: no definition for: CreationTime
AWS::SageMaker::FeatureGroup: attributes: no definition for: FeatureGroupStatus
AWS::SageMaker::FeatureGroup: attributes: no definition for: FailureReason
AWS::SageMaker::FeatureGroup: attributes: no definition for: OfflineStoreStatus

    *** loading ***

us-east-2/aws-sagemaker-modelcard.json: .definitions['TrainingDetails'].properties['TrainingJobDetails'].properties['TrainingMetrics'].items
    { maxItems: 50, '$ref': '#/definitions/TrainingMetric' }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-2/aws-sagemaker-modelcard.json: .definitions['TrainingDetails'].properties['TrainingJobDetails'].properties['TrainingMetrics']
    {
      type: 'array',
      insertionOrder: true,
      items: { maxItems: 50, '$ref': '#/definitions/TrainingMetric' }
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'insertionOrder' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'insertionOrder' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'insertionOrder' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'insertionOrder' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'insertionOrder' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'insertionOrder' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-2/aws-sagemaker-modelcard.json: .definitions['TrainingDetails'].properties['TrainingJobDetails']
    {
      type: 'object',
      additionalProperties: false,
      properties: {
        TrainingArn: {
          description: 'SageMaker Training job arn.',
          type: 'string',
          maxLength: 1024
        },
        TrainingDatasets: {
          description: 'Location of the model datasets.',
          type: 'array',
          insertionOrder: true,
          maxItems: 15,
          items: { type: 'string', maxLength: 1024 }
        },
        TrainingEnvironment: {
          type: 'object',
          additionalProperties: false,
          properties: { ContainerImage: [Object] }
        },
        TrainingMetrics: {
          type: 'array',
          insertionOrder: true,
          items: { maxItems: 50, '$ref': '#/definitions/TrainingMetric' }
        },
        UserProvidedTrainingMetrics: {
          type: 'array',
          insertionOrder: true,
          items: { maxItems: 50, '$ref': '#/definitions/TrainingMetric' }
        },
        HyperParameters: {
          type: 'array',
          insertionOrder: true,
          items: { maxItems: 100, '$ref': '#/definitions/TrainingHyperParameter' }
        },
        UserProvidedHyperParameters: {
          type: 'array',
          insertionOrder: true,
          items: { maxItems: 100, '$ref': '#/definitions/TrainingHyperParameter' }
        }
      }
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'properties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-2/aws-sagemaker-modelcard.json: .definitions['TrainingDetails']
    {
      description: 'Overview about the training.',
      type: 'object',
      additionalProperties: false,
      properties: {
        ObjectiveFunction: { '$ref': '#/definitions/ObjectiveFunction' },
        TrainingObservations: { type: 'string', maxLength: 1024 },
        TrainingJobDetails: {
          type: 'object',
          additionalProperties: false,
          properties: {
            TrainingArn: [Object],
            TrainingDatasets: [Object],
            TrainingEnvironment: [Object],
            TrainingMetrics: [Object],
            UserProvidedTrainingMetrics: [Object],
            HyperParameters: [Object],
            UserProvidedHyperParameters: [Object]
          }
        }
      }
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'properties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-2/aws-sagemaker-space.json: .properties['SpaceSettings']
    {
      '$ref': '#/definitions/SpaceSettings',
      description: 'A collection of settings.',
      uniqueItems: false,
      minItems: 0,
      maxItems: 50
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-2/aws-sagemaker-userprofile.json: .properties['UserSettings']
    {
      '$ref': '#/definitions/UserSettings',
      description: 'A collection of settings.',
      uniqueItems: false,
      minItems: 0,
      maxItems: 50
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-west-2/aws-sagemaker-modelcard.json: .definitions['TrainingDetails'].properties['TrainingJobDetails'].properties['TrainingMetrics'].items
    { maxItems: 50, '$ref': '#/definitions/TrainingMetric' }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-west-2/aws-sagemaker-modelcard.json: .definitions['TrainingDetails'].properties['TrainingJobDetails'].properties['TrainingMetrics']
    {
      type: 'array',
      insertionOrder: true,
      items: { maxItems: 50, '$ref': '#/definitions/TrainingMetric' }
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'insertionOrder' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'insertionOrder' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'insertionOrder' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'insertionOrder' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'insertionOrder' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'insertionOrder' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-west-2/aws-sagemaker-modelcard.json: .definitions['TrainingDetails'].properties['TrainingJobDetails']
    {
      type: 'object',
      additionalProperties: false,
      properties: {
        TrainingArn: {
          description: 'SageMaker Training job arn.',
          type: 'string',
          maxLength: 1024
        },
        TrainingDatasets: {
          description: 'Location of the model datasets.',
          type: 'array',
          insertionOrder: true,
          maxItems: 15,
          items: { type: 'string', maxLength: 1024 }
        },
        TrainingEnvironment: {
          type: 'object',
          additionalProperties: false,
          properties: { ContainerImage: [Object] }
        },
        TrainingMetrics: {
          type: 'array',
          insertionOrder: true,
          items: { maxItems: 50, '$ref': '#/definitions/TrainingMetric' }
        },
        UserProvidedTrainingMetrics: {
          type: 'array',
          insertionOrder: true,
          items: { maxItems: 50, '$ref': '#/definitions/TrainingMetric' }
        },
        HyperParameters: {
          type: 'array',
          insertionOrder: true,
          items: { maxItems: 100, '$ref': '#/definitions/TrainingHyperParameter' }
        },
        UserProvidedHyperParameters: {
          type: 'array',
          insertionOrder: true,
          items: { maxItems: 100, '$ref': '#/definitions/TrainingHyperParameter' }
        }
      }
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'properties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-west-2/aws-sagemaker-modelcard.json: .definitions['TrainingDetails']
    {
      description: 'Overview about the training.',
      type: 'object',
      additionalProperties: false,
      properties: {
        ObjectiveFunction: { '$ref': '#/definitions/ObjectiveFunction' },
        TrainingObservations: { type: 'string', maxLength: 1024 },
        TrainingJobDetails: {
          type: 'object',
          additionalProperties: false,
          properties: {
            TrainingArn: [Object],
            TrainingDatasets: [Object],
            TrainingEnvironment: [Object],
            TrainingMetrics: [Object],
            UserProvidedTrainingMetrics: [Object],
            HyperParameters: [Object],
            UserProvidedHyperParameters: [Object]
          }
        }
      }
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'properties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-west-2/aws-sagemaker-space.json: .properties['SpaceSettings']
    {
      '$ref': '#/definitions/SpaceSettings',
      description: 'A collection of settings.',
      uniqueItems: false,
      minItems: 0,
      maxItems: 50
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-west-2/aws-sagemaker-userprofile.json: .properties['UserSettings']
    {
      '$ref': '#/definitions/UserSettings',
      description: 'A collection of settings.',
      uniqueItems: false,
      minItems: 0,
      maxItems: 50
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-1/aws-sagemaker-modelcard.json: .definitions['TrainingDetails'].properties['TrainingJobDetails'].properties['TrainingMetrics'].items
    { maxItems: 50, '$ref': '#/definitions/TrainingMetric' }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-1/aws-sagemaker-modelcard.json: .definitions['TrainingDetails'].properties['TrainingJobDetails'].properties['TrainingMetrics']
    {
      type: 'array',
      insertionOrder: true,
      items: { maxItems: 50, '$ref': '#/definitions/TrainingMetric' }
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'insertionOrder' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'insertionOrder' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'insertionOrder' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'insertionOrder' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'insertionOrder' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'insertionOrder' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-1/aws-sagemaker-modelcard.json: .definitions['TrainingDetails'].properties['TrainingJobDetails']
    {
      type: 'object',
      additionalProperties: false,
      properties: {
        TrainingArn: {
          description: 'SageMaker Training job arn.',
          type: 'string',
          maxLength: 1024
        },
        TrainingDatasets: {
          description: 'Location of the model datasets.',
          type: 'array',
          insertionOrder: true,
          maxItems: 15,
          items: { type: 'string', maxLength: 1024 }
        },
        TrainingEnvironment: {
          type: 'object',
          additionalProperties: false,
          properties: { ContainerImage: [Object] }
        },
        TrainingMetrics: {
          type: 'array',
          insertionOrder: true,
          items: { maxItems: 50, '$ref': '#/definitions/TrainingMetric' }
        },
        UserProvidedTrainingMetrics: {
          type: 'array',
          insertionOrder: true,
          items: { maxItems: 50, '$ref': '#/definitions/TrainingMetric' }
        },
        HyperParameters: {
          type: 'array',
          insertionOrder: true,
          items: { maxItems: 100, '$ref': '#/definitions/TrainingHyperParameter' }
        },
        UserProvidedHyperParameters: {
          type: 'array',
          insertionOrder: true,
          items: { maxItems: 100, '$ref': '#/definitions/TrainingHyperParameter' }
        }
      }
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'properties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-1/aws-sagemaker-modelcard.json: .definitions['TrainingDetails']
    {
      description: 'Overview about the training.',
      type: 'object',
      additionalProperties: false,
      properties: {
        ObjectiveFunction: { '$ref': '#/definitions/ObjectiveFunction' },
        TrainingObservations: { type: 'string', maxLength: 1024 },
        TrainingJobDetails: {
          type: 'object',
          additionalProperties: false,
          properties: {
            TrainingArn: [Object],
            TrainingDatasets: [Object],
            TrainingEnvironment: [Object],
            TrainingMetrics: [Object],
            UserProvidedTrainingMetrics: [Object],
            HyperParameters: [Object],
            UserProvidedHyperParameters: [Object]
          }
        }
      }
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'properties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-1/aws-sagemaker-space.json: .properties['SpaceSettings']
    {
      '$ref': '#/definitions/SpaceSettings',
      description: 'A collection of settings.',
      uniqueItems: false,
      minItems: 0,
      maxItems: 50
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-1/aws-sagemaker-userprofile.json: .properties['UserSettings']
    {
      '$ref': '#/definitions/UserSettings',
      description: 'A collection of settings.',
      uniqueItems: false,
      minItems: 0,
      maxItems: 50
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }

    *** patch ***

us-east-2/aws-sagemaker-dataqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using minItems, not minLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
[+]           "minItems": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-dataqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using maxItems, not maxLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
[+]           "maxItems": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-dataqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: minLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-dataqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: maxLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-dataqualityjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: minimum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
[-]           "minimum": 1
              "maximum": 2048
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-dataqualityjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: maximum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
              "minimum": 1
[-]           "maximum": 2048
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-imageversion.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "typeName": "AWS::SageMaker::ImageVersion"
      "description": "Resource Type definition for AWS::SageMaker::ImageVersion"
      "additionalProperties": false
      "properties": { ... }
      "definitions": { ... }
      "required": [ ... ]
      "primaryIdentifier": [ ... ]
      "readOnlyProperties": [ ... ]
      "createOnlyProperties": [ ... ]
      "handlers": { ... }
[+]   "taggable": false
    }
us-east-2/aws-sagemaker-modelbiasjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using minItems, not minLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
[+]           "minItems": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-modelbiasjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using maxItems, not maxLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
[+]           "maxItems": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-modelbiasjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: minLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-modelbiasjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: maxLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-modelbiasjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: minimum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
[-]           "minimum": 1
              "maximum": 2048
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-modelbiasjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: maximum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
              "minimum": 1
[-]           "maximum": 2048
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-modelcard.json
--------------------------------
/definitions: [Backwards compatibility] Undoing upstream type rename. This is legal in CFN but illegal in CDK. Was a single type, is now multiple XOR types.
    {
      "definitions": {
        "SecurityConfig": { ... }
        "UserContext": { ... }
        "Tag": { ... }
        "Content": { ... }
        "ModelOverview": { ... }
        "ModelPackageDetails": { ... }
        "IntendedUses": { ... }
        "BusinessDetails": { ... }
        "TrainingDetails": { ... }
        "EvaluationDetails": { ... }
        "EvaluationDetail": { ... }
        "MetricGroup": { ... }
        "AdditionalInformation": { ... }
        "ModelPackageCreator": { ... }
        "SourceAlgorithms": { ... }
        "SourceAlgorithm": { ... }
        "InferenceSpecification": { ... }
        "Container": { ... }
        "RiskRating": { ... }
        "ObjectiveFunction": { ... }
        "TrainingMetric": { ... }
        "TrainingHyperParameter": { ... }
        "LinearGraphMetric": { ... }
        "BarChartMetric": { ... }
        "MatrixMetric": { ... }
        "SimpleMetric": { ... }
        "AxisNameString": { ... }
        "AxisNameArray": { ... }
[+]     "MetricDataItems": {"type":"object","required":["Name","Type","Value"],"properties":{"Name":{"type":"string","pattern":".{1,255}"},"Notes":{"type":"string","maxLength":1024},"Type":{"type":"string","enum":["number","string","boolean","linear_graph","bar_chart","matrix"]},"Value":{"type":"object"},"XAxisName":{"type":"array","items":{"type":"string"}},"YAxisName":{"type":"array","items":{"type":"string"}}}}
      }
    }
us-east-2/aws-sagemaker-modelcard.json
--------------------------------
/definitions/MetricGroup/properties/MetricData: [Backwards compatibility] Undoing upstream type rename. This is legal in CFN but illegal in CDK. Was a single type, is now multiple XOR types.
    {
      "definitions": {
        "MetricGroup": {
          "properties": {
            "Name": { ... }
[-]         "MetricData": {"type":"array","insertionOrder":true,"items":{"anyOf":[{"$ref":"#/definitions/SimpleMetric"},{"$ref":"#/definitions/LinearGraphMetric"},{"$ref":"#/definitions/BarChartMetric"},{"$ref":"#/definitions/MatrixMetric"}]}}
[+]         "MetricData": {"type":"array","insertionOrder":true,"items":{"$ref":"#/definitions/MetricDataItems"}}
          }
        }
      }
    }
us-east-2/aws-sagemaker-modelexplainabilityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using minItems, not minLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
[+]           "minItems": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-modelexplainabilityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using maxItems, not maxLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
[+]           "maxItems": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-modelexplainabilityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: minLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-modelexplainabilityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: maxLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-modelexplainabilityjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: minimum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
[-]           "minimum": 1
              "maximum": 2048
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-modelexplainabilityjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: maximum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
              "minimum": 1
[-]           "maximum": 2048
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-modelpackage.json
--------------------------------
/definitions/SourceAlgorithmSpecification: insertionOrder does not apply to type: 'object'
    {
      "definitions": {
        "SourceAlgorithmSpecification": {
          "description": "Details about the algorithm that was used to create the model package."
          "type": "object"
          "additionalProperties": false
          "properties": { ... }
          "required": [ ... ]
[-]       "insertionOrder": true
        }
      }
    }
us-east-2/aws-sagemaker-modelpackage.json
--------------------------------
/definitions/ValidationSpecification: insertionOrder does not apply to type: 'object'
    {
      "definitions": {
        "ValidationSpecification": {
          "description": "Specifies configurations for one or more transform jobs that Amazon SageMaker runs to test the model package."
          "type": "object"
          "additionalProperties": false
          "properties": { ... }
          "required": [ ... ]
[-]       "insertionOrder": true
        }
      }
    }
us-east-2/aws-sagemaker-modelqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using minItems, not minLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
[+]           "minItems": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-modelqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using maxItems, not maxLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
[+]           "maxItems": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-modelqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: minLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-modelqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: maxLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-modelqualityjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: minimum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
[-]           "minimum": 1
              "maximum": 2048
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-modelqualityjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: maximum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
              "minimum": 1
[-]           "maximum": 2048
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/ContainerArgument: additionalProperties does not apply to type: 'string'
    {
      "definitions": {
        "ContainerArgument": {
          "type": "string"
[-]       "additionalProperties": false
          "description": "Arguments for the container used to run the monitoring job."
          "minLength": 1
          "maxLength": 256
        }
      }
    }
us-east-2/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/MonitoringInputs: additionalProperties does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringInputs": {
          "type": "array"
[-]       "additionalProperties": false
          "description": "The array of inputs for the monitoring job."
          "minItems": 1
          "maxItems": 1
          "items": { ... }
        }
      }
    }
us-east-2/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using minItems, not minLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
[+]           "minItems": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using maxItems, not maxLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
[+]           "maxItems": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: minLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: maxLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: minimum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
[-]           "minimum": 1
              "maximum": 2048
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: maximum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
              "minimum": 1
[-]           "maximum": 2048
            }
          }
        }
      }
    }
us-east-2/aws-sagemaker-notebookinstancelifecycleconfig.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "typeName": "AWS::SageMaker::NotebookInstanceLifecycleConfig"
      "description": "Resource Type definition for AWS::SageMaker::NotebookInstanceLifecycleConfig"
      "additionalProperties": false
      "properties": { ... }
      "definitions": { ... }
      "createOnlyProperties": [ ... ]
      "primaryIdentifier": [ ... ]
      "readOnlyProperties": [ ... ]
[+]   "taggable": false
    }
us-west-2/aws-sagemaker-dataqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using minItems, not minLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
[+]           "minItems": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-dataqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using maxItems, not maxLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
[+]           "maxItems": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-dataqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: minLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-dataqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: maxLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-dataqualityjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: minimum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
[-]           "minimum": 1
              "maximum": 2048
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-dataqualityjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: maximum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
              "minimum": 1
[-]           "maximum": 2048
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-imageversion.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "typeName": "AWS::SageMaker::ImageVersion"
      "description": "Resource Type definition for AWS::SageMaker::ImageVersion"
      "additionalProperties": false
      "properties": { ... }
      "definitions": { ... }
      "required": [ ... ]
      "primaryIdentifier": [ ... ]
      "readOnlyProperties": [ ... ]
      "createOnlyProperties": [ ... ]
      "handlers": { ... }
[+]   "taggable": false
    }
us-west-2/aws-sagemaker-modelbiasjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using minItems, not minLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
[+]           "minItems": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-modelbiasjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using maxItems, not maxLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
[+]           "maxItems": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-modelbiasjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: minLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-modelbiasjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: maxLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-modelbiasjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: minimum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
[-]           "minimum": 1
              "maximum": 2048
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-modelbiasjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: maximum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
              "minimum": 1
[-]           "maximum": 2048
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-modelcard.json
--------------------------------
/definitions: [Backwards compatibility] Undoing upstream type rename. This is legal in CFN but illegal in CDK. Was a single type, is now multiple XOR types.
    {
      "definitions": {
        "SecurityConfig": { ... }
        "UserContext": { ... }
        "Tag": { ... }
        "Content": { ... }
        "ModelOverview": { ... }
        "ModelPackageDetails": { ... }
        "IntendedUses": { ... }
        "BusinessDetails": { ... }
        "TrainingDetails": { ... }
        "EvaluationDetails": { ... }
        "EvaluationDetail": { ... }
        "MetricGroup": { ... }
        "AdditionalInformation": { ... }
        "ModelPackageCreator": { ... }
        "SourceAlgorithms": { ... }
        "SourceAlgorithm": { ... }
        "InferenceSpecification": { ... }
        "Container": { ... }
        "RiskRating": { ... }
        "ObjectiveFunction": { ... }
        "TrainingMetric": { ... }
        "TrainingHyperParameter": { ... }
        "LinearGraphMetric": { ... }
        "BarChartMetric": { ... }
        "MatrixMetric": { ... }
        "SimpleMetric": { ... }
        "AxisNameString": { ... }
        "AxisNameArray": { ... }
[+]     "MetricDataItems": {"type":"object","required":["Name","Type","Value"],"properties":{"Name":{"type":"string","pattern":".{1,255}"},"Notes":{"type":"string","maxLength":1024},"Type":{"type":"string","enum":["number","string","boolean","linear_graph","bar_chart","matrix"]},"Value":{"type":"object"},"XAxisName":{"type":"array","items":{"type":"string"}},"YAxisName":{"type":"array","items":{"type":"string"}}}}
      }
    }
us-west-2/aws-sagemaker-modelcard.json
--------------------------------
/definitions/MetricGroup/properties/MetricData: [Backwards compatibility] Undoing upstream type rename. This is legal in CFN but illegal in CDK. Was a single type, is now multiple XOR types.
    {
      "definitions": {
        "MetricGroup": {
          "properties": {
            "Name": { ... }
[-]         "MetricData": {"type":"array","insertionOrder":true,"items":{"anyOf":[{"$ref":"#/definitions/SimpleMetric"},{"$ref":"#/definitions/LinearGraphMetric"},{"$ref":"#/definitions/BarChartMetric"},{"$ref":"#/definitions/MatrixMetric"}]}}
[+]         "MetricData": {"type":"array","insertionOrder":true,"items":{"$ref":"#/definitions/MetricDataItems"}}
          }
        }
      }
    }
us-west-2/aws-sagemaker-modelexplainabilityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using minItems, not minLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
[+]           "minItems": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-modelexplainabilityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using maxItems, not maxLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
[+]           "maxItems": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-modelexplainabilityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: minLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-modelexplainabilityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: maxLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-modelexplainabilityjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: minimum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
[-]           "minimum": 1
              "maximum": 2048
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-modelexplainabilityjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: maximum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
              "minimum": 1
[-]           "maximum": 2048
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-modelpackage.json
--------------------------------
/definitions/SourceAlgorithmSpecification: insertionOrder does not apply to type: 'object'
    {
      "definitions": {
        "SourceAlgorithmSpecification": {
          "description": "Details about the algorithm that was used to create the model package."
          "type": "object"
          "additionalProperties": false
          "properties": { ... }
          "required": [ ... ]
[-]       "insertionOrder": true
        }
      }
    }
us-west-2/aws-sagemaker-modelpackage.json
--------------------------------
/definitions/ValidationSpecification: insertionOrder does not apply to type: 'object'
    {
      "definitions": {
        "ValidationSpecification": {
          "description": "Specifies configurations for one or more transform jobs that Amazon SageMaker runs to test the model package."
          "type": "object"
          "additionalProperties": false
          "properties": { ... }
          "required": [ ... ]
[-]       "insertionOrder": true
        }
      }
    }
us-west-2/aws-sagemaker-modelqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using minItems, not minLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
[+]           "minItems": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-modelqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using maxItems, not maxLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
[+]           "maxItems": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-modelqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: minLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-modelqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: maxLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-modelqualityjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: minimum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
[-]           "minimum": 1
              "maximum": 2048
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-modelqualityjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: maximum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
              "minimum": 1
[-]           "maximum": 2048
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/ContainerArgument: additionalProperties does not apply to type: 'string'
    {
      "definitions": {
        "ContainerArgument": {
          "type": "string"
[-]       "additionalProperties": false
          "description": "Arguments for the container used to run the monitoring job."
          "minLength": 1
          "maxLength": 256
        }
      }
    }
us-west-2/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/MonitoringInputs: additionalProperties does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringInputs": {
          "type": "array"
[-]       "additionalProperties": false
          "description": "The array of inputs for the monitoring job."
          "minItems": 1
          "maxItems": 1
          "items": { ... }
        }
      }
    }
us-west-2/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using minItems, not minLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
[+]           "minItems": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using maxItems, not maxLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
[+]           "maxItems": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: minLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: maxLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: minimum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
[-]           "minimum": 1
              "maximum": 2048
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: maximum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
              "minimum": 1
[-]           "maximum": 2048
            }
          }
        }
      }
    }
us-west-2/aws-sagemaker-notebookinstancelifecycleconfig.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "typeName": "AWS::SageMaker::NotebookInstanceLifecycleConfig"
      "description": "Resource Type definition for AWS::SageMaker::NotebookInstanceLifecycleConfig"
      "additionalProperties": false
      "properties": { ... }
      "definitions": { ... }
      "createOnlyProperties": [ ... ]
      "primaryIdentifier": [ ... ]
      "readOnlyProperties": [ ... ]
[+]   "taggable": false
    }
us-east-1/aws-sagemaker-dataqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using minItems, not minLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
[+]           "minItems": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-dataqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using maxItems, not maxLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
[+]           "maxItems": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-dataqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: minLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-dataqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: maxLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-dataqualityjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: minimum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
[-]           "minimum": 1
              "maximum": 2048
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-dataqualityjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: maximum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
              "minimum": 1
[-]           "maximum": 2048
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-imageversion.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "typeName": "AWS::SageMaker::ImageVersion"
      "description": "Resource Type definition for AWS::SageMaker::ImageVersion"
      "additionalProperties": false
      "properties": { ... }
      "definitions": { ... }
      "required": [ ... ]
      "primaryIdentifier": [ ... ]
      "readOnlyProperties": [ ... ]
      "createOnlyProperties": [ ... ]
      "handlers": { ... }
[+]   "taggable": false
    }
us-east-1/aws-sagemaker-modelbiasjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using minItems, not minLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
[+]           "minItems": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-modelbiasjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using maxItems, not maxLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
[+]           "maxItems": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-modelbiasjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: minLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-modelbiasjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: maxLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-modelbiasjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: minimum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
[-]           "minimum": 1
              "maximum": 2048
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-modelbiasjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: maximum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
              "minimum": 1
[-]           "maximum": 2048
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-modelcard.json
--------------------------------
/definitions: [Backwards compatibility] Undoing upstream type rename. This is legal in CFN but illegal in CDK. Was a single type, is now multiple XOR types.
    {
      "definitions": {
        "SecurityConfig": { ... }
        "UserContext": { ... }
        "Tag": { ... }
        "Content": { ... }
        "ModelOverview": { ... }
        "ModelPackageDetails": { ... }
        "IntendedUses": { ... }
        "BusinessDetails": { ... }
        "TrainingDetails": { ... }
        "EvaluationDetails": { ... }
        "EvaluationDetail": { ... }
        "MetricGroup": { ... }
        "AdditionalInformation": { ... }
        "ModelPackageCreator": { ... }
        "SourceAlgorithms": { ... }
        "SourceAlgorithm": { ... }
        "InferenceSpecification": { ... }
        "Container": { ... }
        "RiskRating": { ... }
        "ObjectiveFunction": { ... }
        "TrainingMetric": { ... }
        "TrainingHyperParameter": { ... }
        "LinearGraphMetric": { ... }
        "BarChartMetric": { ... }
        "MatrixMetric": { ... }
        "SimpleMetric": { ... }
        "AxisNameString": { ... }
        "AxisNameArray": { ... }
[+]     "MetricDataItems": {"type":"object","required":["Name","Type","Value"],"properties":{"Name":{"type":"string","pattern":".{1,255}"},"Notes":{"type":"string","maxLength":1024},"Type":{"type":"string","enum":["number","string","boolean","linear_graph","bar_chart","matrix"]},"Value":{"type":"object"},"XAxisName":{"type":"array","items":{"type":"string"}},"YAxisName":{"type":"array","items":{"type":"string"}}}}
      }
    }
us-east-1/aws-sagemaker-modelcard.json
--------------------------------
/definitions/MetricGroup/properties/MetricData: [Backwards compatibility] Undoing upstream type rename. This is legal in CFN but illegal in CDK. Was a single type, is now multiple XOR types.
    {
      "definitions": {
        "MetricGroup": {
          "properties": {
            "Name": { ... }
[-]         "MetricData": {"type":"array","insertionOrder":true,"items":{"anyOf":[{"$ref":"#/definitions/SimpleMetric"},{"$ref":"#/definitions/LinearGraphMetric"},{"$ref":"#/definitions/BarChartMetric"},{"$ref":"#/definitions/MatrixMetric"}]}}
[+]         "MetricData": {"type":"array","insertionOrder":true,"items":{"$ref":"#/definitions/MetricDataItems"}}
          }
        }
      }
    }
us-east-1/aws-sagemaker-modelexplainabilityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using minItems, not minLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
[+]           "minItems": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-modelexplainabilityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using maxItems, not maxLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
[+]           "maxItems": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-modelexplainabilityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: minLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-modelexplainabilityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: maxLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-modelexplainabilityjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: minimum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
[-]           "minimum": 1
              "maximum": 2048
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-modelexplainabilityjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: maximum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
              "minimum": 1
[-]           "maximum": 2048
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-modelpackage.json
--------------------------------
/definitions/SourceAlgorithmSpecification: insertionOrder does not apply to type: 'object'
    {
      "definitions": {
        "SourceAlgorithmSpecification": {
          "description": "Details about the algorithm that was used to create the model package."
          "type": "object"
          "additionalProperties": false
          "properties": { ... }
          "required": [ ... ]
[-]       "insertionOrder": true
        }
      }
    }
us-east-1/aws-sagemaker-modelpackage.json
--------------------------------
/definitions/ValidationSpecification: insertionOrder does not apply to type: 'object'
    {
      "definitions": {
        "ValidationSpecification": {
          "description": "Specifies configurations for one or more transform jobs that Amazon SageMaker runs to test the model package."
          "type": "object"
          "additionalProperties": false
          "properties": { ... }
          "required": [ ... ]
[-]       "insertionOrder": true
        }
      }
    }
us-east-1/aws-sagemaker-modelqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using minItems, not minLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
[+]           "minItems": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-modelqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using maxItems, not maxLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
[+]           "maxItems": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-modelqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: minLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-modelqualityjobdefinition.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: maxLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-modelqualityjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: minimum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
[-]           "minimum": 1
              "maximum": 2048
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-modelqualityjobdefinition.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: maximum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
              "minimum": 1
[-]           "maximum": 2048
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/ContainerArgument: additionalProperties does not apply to type: 'string'
    {
      "definitions": {
        "ContainerArgument": {
          "type": "string"
[-]       "additionalProperties": false
          "description": "Arguments for the container used to run the monitoring job."
          "minLength": 1
          "maxLength": 256
        }
      }
    }
us-east-1/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/MonitoringInputs: additionalProperties does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringInputs": {
          "type": "array"
[-]       "additionalProperties": false
          "description": "The array of inputs for the monitoring job."
          "minItems": 1
          "maxItems": 1
          "items": { ... }
        }
      }
    }
us-east-1/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using minItems, not minLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
[+]           "minItems": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: array lengths are specified using maxItems, not maxLength
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
[+]           "maxItems": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: minLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
[-]           "minLength": 1
              "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/MonitoringOutputConfig/properties/MonitoringOutputs: maxLength does not apply to type: 'array'
    {
      "definitions": {
        "MonitoringOutputConfig": {
          "properties": {
            "MonitoringOutputs": {
              "type": "array"
              "description": "Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded."
              "minLength": 1
[-]           "maxLength": 1
              "items": { ... }
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: minimum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
[-]           "minimum": 1
              "maximum": 2048
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-monitoringschedule.json
--------------------------------
/definitions/ClusterConfig/properties/VolumeKmsKeyId: maximum does not apply to type: 'string'
    {
      "definitions": {
        "ClusterConfig": {
          "properties": {
            "VolumeKmsKeyId": {
              "description": "The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job."
              "type": "string"
              "minimum": 1
[-]           "maximum": 2048
            }
          }
        }
      }
    }
us-east-1/aws-sagemaker-notebookinstancelifecycleconfig.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "typeName": "AWS::SageMaker::NotebookInstanceLifecycleConfig"
      "description": "Resource Type definition for AWS::SageMaker::NotebookInstanceLifecycleConfig"
      "additionalProperties": false
      "properties": { ... }
      "definitions": { ... }
      "createOnlyProperties": [ ... ]
      "primaryIdentifier": [ ... ]
      "readOnlyProperties": [ ... ]
[+]   "taggable": false
    }
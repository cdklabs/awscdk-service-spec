CDK found the following issues while trying to read the CloudFormation resource definition for AWS_S3:

    *** interpreting ***

AWS::S3::StorageLens: property StorageLensConfiguration: typedef StorageLensConfiguration: property DataExport: typedef DataExport: property S3BucketDestination: typedef S3BucketDestination: property Encryption: Ref Encryption is a union of objects. Merging into a single type.

    *** loading ***

us-east-2/aws-s3-accesspoint.json: .properties['Arn']
    {
      '$ref': '#/definitions/Arn',
      description: 'The Amazon Resource Name (ARN) of the specified accesspoint.',
      examples: [ 'arn:aws:s3:us-west-2:123456789012:accesspoint/test' ]
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'examples' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-2/aws-s3-bucket.json: .definitions['CorsConfiguration'].properties['CorsRules'].items
    { '$ref': '#/definitions/CorsRule', maxLength: 100 }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxLength' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-2/aws-s3-bucket.json: .definitions['CorsConfiguration'].properties['CorsRules']
    {
      type: 'array',
      uniqueItems: true,
      insertionOrder: true,
      items: { '$ref': '#/definitions/CorsRule', maxLength: 100 }
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-2/aws-s3-bucket.json: .definitions['CorsConfiguration']
    {
      type: 'object',
      additionalProperties: false,
      properties: {
        CorsRules: {
          type: 'array',
          uniqueItems: true,
          insertionOrder: true,
          items: { '$ref': '#/definitions/CorsRule', maxLength: 100 }
        }
      },
      required: [ 'CorsRules' ]
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'properties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-west-2/aws-s3-accesspoint.json: .properties['Arn']
    {
      '$ref': '#/definitions/Arn',
      description: 'The Amazon Resource Name (ARN) of the specified accesspoint.',
      examples: [ 'arn:aws:s3:us-west-2:123456789012:accesspoint/test' ]
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'examples' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-west-2/aws-s3-bucket.json: .definitions['CorsConfiguration'].properties['CorsRules'].items
    { '$ref': '#/definitions/CorsRule', maxLength: 100 }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxLength' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-west-2/aws-s3-bucket.json: .definitions['CorsConfiguration'].properties['CorsRules']
    {
      type: 'array',
      uniqueItems: true,
      insertionOrder: true,
      items: { '$ref': '#/definitions/CorsRule', maxLength: 100 }
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-west-2/aws-s3-bucket.json: .definitions['CorsConfiguration']
    {
      type: 'object',
      additionalProperties: false,
      properties: {
        CorsRules: {
          type: 'array',
          uniqueItems: true,
          insertionOrder: true,
          items: { '$ref': '#/definitions/CorsRule', maxLength: 100 }
        }
      },
      required: [ 'CorsRules' ]
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'properties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-1/aws-s3-accesspoint.json: .properties['Arn']
    {
      '$ref': '#/definitions/Arn',
      description: 'The Amazon Resource Name (ARN) of the specified accesspoint.',
      examples: [ 'arn:aws:s3:us-west-2:123456789012:accesspoint/test' ]
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'examples' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-1/aws-s3-bucket.json: .definitions['CorsConfiguration'].properties['CorsRules'].items
    { '$ref': '#/definitions/CorsRule', maxLength: 100 }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'maxLength' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: '$ref' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-1/aws-s3-bucket.json: .definitions['CorsConfiguration'].properties['CorsRules']
    {
      type: 'array',
      uniqueItems: true,
      insertionOrder: true,
      items: { '$ref': '#/definitions/CorsRule', maxLength: 100 }
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        const: false,
      |        description: 'FIXME: should be required but some service teams have omitted it.',
      |        type: 'boolean'
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: {
      |        description: 'FIXME: these are weird but oh hey?',
      |        type: 'number'
      |      },
      |      properties: { '$ref': '#/definitions/jsonschema.ObjectProperties' },
      |      required: { items: { type: 'string' }, type: 'array' },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type', 'properties' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'uniqueItems' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }
us-east-1/aws-s3-bucket.json: .definitions['CorsConfiguration']
    {
      type: 'object',
      additionalProperties: false,
      properties: {
        CorsRules: {
          type: 'array',
          uniqueItems: true,
          insertionOrder: true,
          items: { '$ref': '#/definitions/CorsRule', maxLength: 100 }
        }
      },
      required: [ 'CorsRules' ]
    }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      '$ref': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ '$ref' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'properties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      additionalProperties: {
      |        anyOf: [ [Object], [Object] ],
      |        default: true,
      |        description: "additionalProperties validates all keys that aren't otherwise validated by properties or patternProperties"
      |      },
      |      description: { type: 'string' },
      |      maxProperties: { type: 'number' },
      |      minProperties: { type: 'number' },
      |      patternProperties: {
      |        additionalProperties: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'object'
      |      },
      |      required: {
      |        description: 'Required keys in a map\n' +
      |          '\n' +
      |          "Doesn't really make a whole lot of sense, but this is used to support mixed map/record types.",
      |        items: { type: 'string' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' },
      |      type: { const: 'object', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.MapLikeObject' },
      |      { '$ref': '#/definitions/jsonschema.RecordLikeObject' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      const: { type: 'string' },
      |      default: { type: 'string' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'string' }, type: 'array' },
      |      examples: { items: { type: 'string' }, type: 'array' },
      |      format: { enum: [ 'date-time', 'uri', 'timestamp' ], type: 'string' },
      |      maxLength: { type: 'number' },
      |      minLength: { type: 'number' },
      |      pattern: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'string', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      arrayType: {
      |        description: 'Does this array describe full reality?\n' +
      |          '\n' +
      |          '- If `Standard`, real elements must be exactly equal to the given array.\n' +
      |          '- If `AttributeList`, the real array may be a superset of the given array.',
      |        enum: [ 'AttributeList', 'Standard' ],
      |        type: 'string'
      |      },
      |      default: { items: {}, type: 'array' },
      |      description: { type: 'string' },
      |      examples: { items: {}, type: 'array' },
      |      insertionOrder: {
      |        description: 'Whether to treat the order as significant\n' +
      |          '\n' +
      |          'In other words, does this array model a "sequence" or a "multiset".\n' +
      |          '\n' +
      |          '- `true` (default): order is significant, the array is a sequence.\n' +
      |          '- `false`: order is insignificant, the array is a set.',
      |        type: 'boolean'
      |      },
      |      items: { '$ref': '#/definitions/jsonschema.Schema' },
      |      maxItems: { type: 'number' },
      |      minItems: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { const: 'array', type: 'string' },
      |      uniqueItems: { type: 'boolean' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'boolean' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'boolean', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      default: { type: 'number' },
      |      description: { type: 'string' },
      |      enum: { items: { type: 'number' }, type: 'array' },
      |      format: { enum: [ 'int64', 'double' ], type: 'string' },
      |      maximum: { type: 'number' },
      |      minimum: { type: 'number' },
      |      multipleOf: { type: 'number' },
      |      title: { type: 'string' },
      |      type: { enum: [ 'number', 'integer' ], type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'additionalProperties' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      title: { type: 'string' },
      |      type: { const: 'null', type: 'string' }
      |    },
      |    required: [ 'type' ],
      |    type: 'object'
      |  }
    type: should be boolean ({ type: 'boolean' })
      |  { const: true, type: 'boolean' }
    const: should be equal to constant ({ allowedValue: true })
      |  { const: true, type: 'boolean' }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Object' },
      |      { '$ref': '#/definitions/jsonschema.String' },
      |      { '$ref': '#/definitions/jsonschema.SchemaArray' },
      |      { '$ref': '#/definitions/jsonschema.Boolean' },
      |      { '$ref': '#/definitions/jsonschema.Number' },
      |      { '$ref': '#/definitions/jsonschema.Null' },
      |      { '$ref': '#/definitions/jsonschema.AnyType' }
      |    ]
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.Reference' },
      |      { '$ref': '#/definitions/jsonschema.ConcreteSingletonSchema' }
      |    ]
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      description: { type: 'string' },
      |      oneOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'oneOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      anyOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'anyOf' ],
      |    type: 'object'
      |  }
    additionalProperties: should NOT have additional properties ({ additionalProperty: 'type' })
      |  {
      |    additionalProperties: false,
      |    properties: {
      |      '$comment': { type: 'string' },
      |      allOf: {
      |        items: { '$ref': '#/definitions/jsonschema.Schema' },
      |        type: 'array'
      |      },
      |      description: { type: 'string' },
      |      title: { type: 'string' }
      |    },
      |    required: [ 'allOf' ],
      |    type: 'object'
      |  }
    anyOf: should match some schema in anyOf ({})
      |  {
      |    anyOf: [
      |      { '$ref': '#/definitions/jsonschema.SingletonSchema' },
      |      { '$ref': '#/definitions/jsonschema.OneOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AnyOf%3CSchema%3E' },
      |      { '$ref': '#/definitions/jsonschema.AllOf%3CSchema%3E' }
      |    ]
      |  }

    *** patch ***

us-east-2/aws-s3-accesspoint.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "typeName": "AWS::S3::AccessPoint"
      "description": "The AWS::S3::AccessPoint resource is an Amazon S3 resource type that you can use to access buckets."
      "sourceUrl": "https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-s3"
      "definitions": { ... }
      "properties": { ... }
      "required": [ ... ]
      "createOnlyProperties": [ ... ]
      "readOnlyProperties": [ ... ]
      "primaryIdentifier": [ ... ]
      "handlers": { ... }
      "additionalProperties": false
[+]   "taggable": false
    }
us-east-2/aws-s3-bucket.json
--------------------------------
/definitions/Rule/properties/ObjectSizeGreaterThan: [Suspected Data Source Problem] Integer property incorrectly defined as string that only allows number characters
    {
      "definitions": {
        "Rule": {
          "properties": {
            "AbortIncompleteMultipartUpload": { ... }
            "ExpirationDate": { ... }
            "ExpirationInDays": { ... }
            "ExpiredObjectDeleteMarker": { ... }
            "Id": { ... }
            "NoncurrentVersionExpirationInDays": { ... }
            "NoncurrentVersionExpiration": { ... }
            "NoncurrentVersionTransition": { ... }
            "NoncurrentVersionTransitions": { ... }
            "Prefix": { ... }
            "Status": { ... }
            "TagFilters": { ... }
[-]         "ObjectSizeGreaterThan": {"type":"string","maxLength":20,"pattern":"[0-9]+"}
[+]         "ObjectSizeGreaterThan": {"type":"integer"}
            "ObjectSizeLessThan": { ... }
            "Transition": { ... }
            "Transitions": { ... }
          }
        }
      }
    }
us-east-2/aws-s3-bucket.json
--------------------------------
/definitions/Rule/properties/ObjectSizeLessThan: [Suspected Data Source Problem] Integer property incorrectly defined as string that only allows number characters
    {
      "definitions": {
        "Rule": {
          "properties": {
            "AbortIncompleteMultipartUpload": { ... }
            "ExpirationDate": { ... }
            "ExpirationInDays": { ... }
            "ExpiredObjectDeleteMarker": { ... }
            "Id": { ... }
            "NoncurrentVersionExpirationInDays": { ... }
            "NoncurrentVersionExpiration": { ... }
            "NoncurrentVersionTransition": { ... }
            "NoncurrentVersionTransitions": { ... }
            "Prefix": { ... }
            "Status": { ... }
            "TagFilters": { ... }
            "ObjectSizeGreaterThan": { ... }
[-]         "ObjectSizeLessThan": {"type":"string","maxLength":20,"pattern":"[0-9]+"}
[+]         "ObjectSizeLessThan": {"type":"integer"}
            "Transition": { ... }
            "Transitions": { ... }
          }
        }
      }
    }
us-east-2/aws-s3-bucket.json
--------------------------------
/definitions/EventBridgeConfiguration/properties/EventBridgeEnabled: canonicalize default type
    {
      "definitions": {
        "EventBridgeConfiguration": {
          "properties": {
            "EventBridgeEnabled": {
              "description": "Specifies whether to send notifications to Amazon EventBridge when events occur in an Amazon S3 bucket."
              "type": "boolean"
[-]           "default": "true"
            }
          }
        }
      }
    }
us-east-2/aws-s3-bucket.json
--------------------------------
/definitions/EventBridgeConfiguration/properties/EventBridgeEnabled: canonicalize default type
    {
      "definitions": {
        "EventBridgeConfiguration": {
          "properties": {
            "EventBridgeEnabled": {
              "description": "Specifies whether to send notifications to Amazon EventBridge when events occur in an Amazon S3 bucket."
              "type": "boolean"
[+]           "default": true
            }
          }
        }
      }
    }
us-east-2/aws-s3-bucket.json
--------------------------------
/definitions/EventBridgeConfiguration/properties/EventBridgeEnabled: default value for type='boolean' cannot be 'string'
    {
      "definitions": {
        "EventBridgeConfiguration": {
          "properties": {
            "EventBridgeEnabled": {
              "description": "Specifies whether to send notifications to Amazon EventBridge when events occur in an Amazon S3 bucket."
              "type": "boolean"
[-]           "default": "true"
            }
          }
        }
      }
    }
us-east-2/aws-s3-bucketpolicy.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "typeName": "AWS::S3::BucketPolicy"
      "description": "Resource Type definition for AWS::S3::BucketPolicy"
      "additionalProperties": false
      "properties": { ... }
      "required": [ ... ]
      "createOnlyProperties": [ ... ]
      "primaryIdentifier": [ ... ]
      "readOnlyProperties": [ ... ]
[+]   "taggable": false
    }
us-east-2/aws-s3-multiregionaccesspoint.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "typeName": "AWS::S3::MultiRegionAccessPoint"
      "description": "AWS::S3::MultiRegionAccessPoint is an Amazon S3 resource type that dynamically routes S3 requests to easily satisfy geographic compliance requirements based on customer-defined routing policies."
      "definitions": { ... }
      "properties": { ... }
      "additionalProperties": false
      "required": [ ... ]
      "readOnlyProperties": [ ... ]
      "createOnlyProperties": [ ... ]
      "primaryIdentifier": [ ... ]
      "handlers": { ... }
[+]   "taggable": false
    }
us-east-2/aws-s3-multiregionaccesspointpolicy.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "typeName": "AWS::S3::MultiRegionAccessPointPolicy"
      "description": "The policy to be attached to a Multi Region Access Point"
      "properties": { ... }
      "additionalProperties": false
      "required": [ ... ]
      "createOnlyProperties": [ ... ]
      "readOnlyProperties": [ ... ]
      "primaryIdentifier": [ ... ]
      "handlers": { ... }
[+]   "taggable": false
    }
us-west-2/aws-s3-accesspoint.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "typeName": "AWS::S3::AccessPoint"
      "description": "The AWS::S3::AccessPoint resource is an Amazon S3 resource type that you can use to access buckets."
      "sourceUrl": "https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-s3"
      "definitions": { ... }
      "properties": { ... }
      "required": [ ... ]
      "createOnlyProperties": [ ... ]
      "readOnlyProperties": [ ... ]
      "primaryIdentifier": [ ... ]
      "handlers": { ... }
      "additionalProperties": false
[+]   "taggable": false
    }
us-west-2/aws-s3-bucket.json
--------------------------------
/definitions/Rule/properties/ObjectSizeGreaterThan: [Suspected Data Source Problem] Integer property incorrectly defined as string that only allows number characters
    {
      "definitions": {
        "Rule": {
          "properties": {
            "AbortIncompleteMultipartUpload": { ... }
            "ExpirationDate": { ... }
            "ExpirationInDays": { ... }
            "ExpiredObjectDeleteMarker": { ... }
            "Id": { ... }
            "NoncurrentVersionExpirationInDays": { ... }
            "NoncurrentVersionExpiration": { ... }
            "NoncurrentVersionTransition": { ... }
            "NoncurrentVersionTransitions": { ... }
            "Prefix": { ... }
            "Status": { ... }
            "TagFilters": { ... }
[-]         "ObjectSizeGreaterThan": {"type":"string","maxLength":20,"pattern":"[0-9]+"}
[+]         "ObjectSizeGreaterThan": {"type":"integer"}
            "ObjectSizeLessThan": { ... }
            "Transition": { ... }
            "Transitions": { ... }
          }
        }
      }
    }
us-west-2/aws-s3-bucket.json
--------------------------------
/definitions/Rule/properties/ObjectSizeLessThan: [Suspected Data Source Problem] Integer property incorrectly defined as string that only allows number characters
    {
      "definitions": {
        "Rule": {
          "properties": {
            "AbortIncompleteMultipartUpload": { ... }
            "ExpirationDate": { ... }
            "ExpirationInDays": { ... }
            "ExpiredObjectDeleteMarker": { ... }
            "Id": { ... }
            "NoncurrentVersionExpirationInDays": { ... }
            "NoncurrentVersionExpiration": { ... }
            "NoncurrentVersionTransition": { ... }
            "NoncurrentVersionTransitions": { ... }
            "Prefix": { ... }
            "Status": { ... }
            "TagFilters": { ... }
            "ObjectSizeGreaterThan": { ... }
[-]         "ObjectSizeLessThan": {"type":"string","maxLength":20,"pattern":"[0-9]+"}
[+]         "ObjectSizeLessThan": {"type":"integer"}
            "Transition": { ... }
            "Transitions": { ... }
          }
        }
      }
    }
us-west-2/aws-s3-bucket.json
--------------------------------
/definitions/EventBridgeConfiguration/properties/EventBridgeEnabled: canonicalize default type
    {
      "definitions": {
        "EventBridgeConfiguration": {
          "properties": {
            "EventBridgeEnabled": {
              "description": "Specifies whether to send notifications to Amazon EventBridge when events occur in an Amazon S3 bucket."
              "type": "boolean"
[-]           "default": "true"
            }
          }
        }
      }
    }
us-west-2/aws-s3-bucket.json
--------------------------------
/definitions/EventBridgeConfiguration/properties/EventBridgeEnabled: canonicalize default type
    {
      "definitions": {
        "EventBridgeConfiguration": {
          "properties": {
            "EventBridgeEnabled": {
              "description": "Specifies whether to send notifications to Amazon EventBridge when events occur in an Amazon S3 bucket."
              "type": "boolean"
[+]           "default": true
            }
          }
        }
      }
    }
us-west-2/aws-s3-bucket.json
--------------------------------
/definitions/EventBridgeConfiguration/properties/EventBridgeEnabled: default value for type='boolean' cannot be 'string'
    {
      "definitions": {
        "EventBridgeConfiguration": {
          "properties": {
            "EventBridgeEnabled": {
              "description": "Specifies whether to send notifications to Amazon EventBridge when events occur in an Amazon S3 bucket."
              "type": "boolean"
[-]           "default": "true"
            }
          }
        }
      }
    }
us-west-2/aws-s3-bucketpolicy.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "typeName": "AWS::S3::BucketPolicy"
      "description": "Resource Type definition for AWS::S3::BucketPolicy"
      "additionalProperties": false
      "properties": { ... }
      "required": [ ... ]
      "createOnlyProperties": [ ... ]
      "primaryIdentifier": [ ... ]
      "readOnlyProperties": [ ... ]
[+]   "taggable": false
    }
us-west-2/aws-s3-multiregionaccesspoint.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "typeName": "AWS::S3::MultiRegionAccessPoint"
      "description": "AWS::S3::MultiRegionAccessPoint is an Amazon S3 resource type that dynamically routes S3 requests to easily satisfy geographic compliance requirements based on customer-defined routing policies."
      "definitions": { ... }
      "properties": { ... }
      "additionalProperties": false
      "required": [ ... ]
      "readOnlyProperties": [ ... ]
      "createOnlyProperties": [ ... ]
      "primaryIdentifier": [ ... ]
      "handlers": { ... }
[+]   "taggable": false
    }
us-west-2/aws-s3-multiregionaccesspointpolicy.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "typeName": "AWS::S3::MultiRegionAccessPointPolicy"
      "description": "The policy to be attached to a Multi Region Access Point"
      "properties": { ... }
      "additionalProperties": false
      "required": [ ... ]
      "createOnlyProperties": [ ... ]
      "readOnlyProperties": [ ... ]
      "primaryIdentifier": [ ... ]
      "handlers": { ... }
[+]   "taggable": false
    }
us-east-1/aws-s3-accesspoint.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "typeName": "AWS::S3::AccessPoint"
      "description": "The AWS::S3::AccessPoint resource is an Amazon S3 resource type that you can use to access buckets."
      "sourceUrl": "https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-s3"
      "definitions": { ... }
      "properties": { ... }
      "required": [ ... ]
      "createOnlyProperties": [ ... ]
      "readOnlyProperties": [ ... ]
      "primaryIdentifier": [ ... ]
      "handlers": { ... }
      "additionalProperties": false
[+]   "taggable": false
    }
us-east-1/aws-s3-bucket.json
--------------------------------
/definitions/Rule/properties/ObjectSizeGreaterThan: [Suspected Data Source Problem] Integer property incorrectly defined as string that only allows number characters
    {
      "definitions": {
        "Rule": {
          "properties": {
            "AbortIncompleteMultipartUpload": { ... }
            "ExpirationDate": { ... }
            "ExpirationInDays": { ... }
            "ExpiredObjectDeleteMarker": { ... }
            "Id": { ... }
            "NoncurrentVersionExpirationInDays": { ... }
            "NoncurrentVersionExpiration": { ... }
            "NoncurrentVersionTransition": { ... }
            "NoncurrentVersionTransitions": { ... }
            "Prefix": { ... }
            "Status": { ... }
            "TagFilters": { ... }
[-]         "ObjectSizeGreaterThan": {"type":"string","maxLength":20,"pattern":"[0-9]+"}
[+]         "ObjectSizeGreaterThan": {"type":"integer"}
            "ObjectSizeLessThan": { ... }
            "Transition": { ... }
            "Transitions": { ... }
          }
        }
      }
    }
us-east-1/aws-s3-bucket.json
--------------------------------
/definitions/Rule/properties/ObjectSizeLessThan: [Suspected Data Source Problem] Integer property incorrectly defined as string that only allows number characters
    {
      "definitions": {
        "Rule": {
          "properties": {
            "AbortIncompleteMultipartUpload": { ... }
            "ExpirationDate": { ... }
            "ExpirationInDays": { ... }
            "ExpiredObjectDeleteMarker": { ... }
            "Id": { ... }
            "NoncurrentVersionExpirationInDays": { ... }
            "NoncurrentVersionExpiration": { ... }
            "NoncurrentVersionTransition": { ... }
            "NoncurrentVersionTransitions": { ... }
            "Prefix": { ... }
            "Status": { ... }
            "TagFilters": { ... }
            "ObjectSizeGreaterThan": { ... }
[-]         "ObjectSizeLessThan": {"type":"string","maxLength":20,"pattern":"[0-9]+"}
[+]         "ObjectSizeLessThan": {"type":"integer"}
            "Transition": { ... }
            "Transitions": { ... }
          }
        }
      }
    }
us-east-1/aws-s3-bucket.json
--------------------------------
/definitions/EventBridgeConfiguration/properties/EventBridgeEnabled: canonicalize default type
    {
      "definitions": {
        "EventBridgeConfiguration": {
          "properties": {
            "EventBridgeEnabled": {
              "description": "Specifies whether to send notifications to Amazon EventBridge when events occur in an Amazon S3 bucket."
              "type": "boolean"
[-]           "default": "true"
            }
          }
        }
      }
    }
us-east-1/aws-s3-bucket.json
--------------------------------
/definitions/EventBridgeConfiguration/properties/EventBridgeEnabled: canonicalize default type
    {
      "definitions": {
        "EventBridgeConfiguration": {
          "properties": {
            "EventBridgeEnabled": {
              "description": "Specifies whether to send notifications to Amazon EventBridge when events occur in an Amazon S3 bucket."
              "type": "boolean"
[+]           "default": true
            }
          }
        }
      }
    }
us-east-1/aws-s3-bucket.json
--------------------------------
/definitions/EventBridgeConfiguration/properties/EventBridgeEnabled: default value for type='boolean' cannot be 'string'
    {
      "definitions": {
        "EventBridgeConfiguration": {
          "properties": {
            "EventBridgeEnabled": {
              "description": "Specifies whether to send notifications to Amazon EventBridge when events occur in an Amazon S3 bucket."
              "type": "boolean"
[-]           "default": "true"
            }
          }
        }
      }
    }
us-east-1/aws-s3-bucketpolicy.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "typeName": "AWS::S3::BucketPolicy"
      "description": "Resource Type definition for AWS::S3::BucketPolicy"
      "additionalProperties": false
      "properties": { ... }
      "required": [ ... ]
      "createOnlyProperties": [ ... ]
      "primaryIdentifier": [ ... ]
      "readOnlyProperties": [ ... ]
[+]   "taggable": false
    }
us-east-1/aws-s3-multiregionaccesspoint.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "typeName": "AWS::S3::MultiRegionAccessPoint"
      "description": "AWS::S3::MultiRegionAccessPoint is an Amazon S3 resource type that dynamically routes S3 requests to easily satisfy geographic compliance requirements based on customer-defined routing policies."
      "definitions": { ... }
      "properties": { ... }
      "additionalProperties": false
      "required": [ ... ]
      "readOnlyProperties": [ ... ]
      "createOnlyProperties": [ ... ]
      "primaryIdentifier": [ ... ]
      "handlers": { ... }
[+]   "taggable": false
    }
us-east-1/aws-s3-multiregionaccesspointpolicy.json
--------------------------------
/taggable: Resource does not have "Tags" property so should be marked non-taggable
    {
      "typeName": "AWS::S3::MultiRegionAccessPointPolicy"
      "description": "The policy to be attached to a Multi Region Access Point"
      "properties": { ... }
      "additionalProperties": false
      "required": [ ... ]
      "createOnlyProperties": [ ... ]
      "readOnlyProperties": [ ... ]
      "primaryIdentifier": [ ... ]
      "handlers": { ... }
[+]   "taggable": false
    }